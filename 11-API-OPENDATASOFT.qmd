---
title: "L'API opendatasoft"
author: "Claude Grasland"
format: html
embed-resources: true
---




L'objectif de ce chapitre est d'examiner en détail le fonctionnement du site **public.opendatasoft**  qui permet d'accèder à des centaines d'API à l'aide de requêtes normalisées. Sans apprendre en détail le fonctionnement de cette API, on va montrer comment créer de petites fonctions facilitant le travail d'exportation des variables ou des données. 

On charge les packages utiles :

```{r}
library(knitr)
library(httr)
library(jsonlite)
library(tidyverse)
library(ggplot2)
```




## Liste des API

La première étape consiste à choisir l'API qui nous intéresse parmi plus de 600. 

### En parcourant le site

On peut se rendre sur le site pour parcourir les API proposées en allant à l'adresse :
https://public.opendatasoft.com

```{r, echo=FALSE}
knitr::include_graphics("img/opendatasoft.png")
```

### En récupérant le catalogue

Mais il est également possible de téécharger le catalogue général ... en se servant d'une API

```{r}
x<-GET('https://public.opendatasoft.com/api/datasets/1.0/search/?q=&rows=1000&start=0')
y<-fromJSON(rawToChar((x$content)))
cat<-y$datasets$metas
row.names(cat)<-y$datasets$datasetid
kable(head(cat[,c(12,1,6,7,8)]),row.names = F)
```



On suppose que le choix s'est porté sur l'API *prix-des-carburants-j-1*

```{r, echo=FALSE}
knitr::include_graphics("img/arbres1.png")
```



## Liste des variables d'une API

Avant de télécharger les données, on effectue une requête pour connaître les variables du tableau que l'on va télécharger ainsi que les variables pouvant servir de "facettes" c'est-à-dire permettant d'effectuer des requêtes.

### Programme

```{r}
tab<-"prix-des-carburants-j-1"
url<-paste("https://public.opendatasoft.com/api/v2/catalog/datasets/",tab,"?",sep="")
x<-GET(url)
y<-fromJSON(rawToChar(x$content))
var<-y$dataset$fields

head(var)


```


On extrait du tableau les colonnes qui fournissent le nom des variables, leur définition et leur type

```{r}
var <- var  %>% select(name, label, type)
kable(var)
```

### Fonction

On le transforme en fonction pour un usage plus simple : 

```{r}
get_variables<-function(idtab = "prix-des-carburants-j-1") {
  url<-paste("https://public.opendatasoft.com/api/v2/catalog/datasets/",idtab,"?",sep="")
  x<-GET(url)
  y<-fromJSON(rawToChar((x$content)))
  var<-y$dataset$fields
  var <- var %>% select(name, label, type)
  return(var)
}
```

On peut désormais appliquer notre fonction sur n'importe quel autre tableau du catalogue. Par exemple, si on choisit le tableau `qualite_de-lair-france` on obtient la liste de variables suivante :

```{r}
var<-get_variables("qualite-de-lair-france")
kable(var)
```

## Récupération des données


Pour des utilisateurs non spécialiste des API, il est difficile de lancer une requête complexe qui suppose une maîtrise avancée du langage de requête. Nous allons donc opter pour une **stratégie pragmatique** (mais efficace) qui consiste à :

1. Utiliser l'interface public.opendatasoft pour rédiger une requête
2. Récupérer le lien de téléchargement
3. Télécharger les données correspondant à la requête 
4. Effectuer les opérations de nettoyage des données et réaliser un graphique
5. Modifier le lien et effectuer à nouveau le étapes 3 et 4
6. Construire une fonction paramétrique de téléchargement + nettoyage + visualisation ...

Pour illustrer cette stratégie, nous allons essayer de créer une application web qui donne le prix du carburant en fonction de deux paramètres, la localisation de l'automobiliste et le type de carburant choisi. Nous allons ainsi essayer de reconstituer une application du ministère de l'économie intitulée ["essence pas cher"](https://www.essence-pas-cher.fr/).



![Essence pas cher](img/essence-pas-cher.jpg)



### 1. Rédaction d'une requête sur public opendatasoft


On utilise les filtres de l'interface pour sélectionner la commune cible à l'aide de son code postal (ex. 94370 = Sucy-en-Brie) et du type carburant (ex. Gazole) : 

![Filtres](img/essence-001.jpg)

### 2. Récupération du lien de téléchargement

Une fois terminée la mise en place des filtres, on se déplace vers la fenêtre "Export" et on choisit le type de format de sortie que l'on souhaite obtenir. Nous pourrions obtenir des fichiers au format texte (.csv) ou tableur (.xls) mais nous allons adopter ici le format .json qui est plus universel dans le domaine de la data science et qui simplifie les transferts entre langages tels que R ou Python.

Un click de souris sur le lien permet de récupérer l'URL de téléchargement : 

![URL](img/essence-002.jpg)

Même si certains caractères spéciaux sont difficiles à comprendre comme **%3A** ou **%22** on devine assez facilement la fonction des différents segments de la requête : 

- URL du site web opendatasoft : *https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/*
- choix de la base de données : *prix-des-carburants-j-1*
- format d'export et langue : *exports/json?lang=fr*
- selection du carburant : *&refine=fuel%3A%22Gazole%22*
- selection de la commune par son code postal : *&qv1=(94370)*
- fuseau horaire (pour dater la requête) : *&timezone=Europe%2FParis*


### 3. Recupération des données à partir de l'URL

Nous pouvons maintenant rédiger un petit programme qui va récupérer les données à partir de ce lien


```{r}
link<-"https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/prix-des-carburants-j-1/exports/json?lang=fr&refine=fuel%3A%22Gazole%22&qv1=(94370)&timezone=Europe%2FParis"
y<-fromJSON(link)
head(y)
```

### 4. Nettoyage des données


Nous procédons ensuite à un petit nettoyage pour ne garder que les variables utiles :

```{r}
names(y)
don <- y %>% select(name,address, update, price = price_gazole ) %>% 
  mutate(update =as.Date(update)) %>%
  arrange(update)

```

Il y a toutefois une mauvaise surprise ... les données semblent erronées à partir d'une certaine date 

```{r}
ggplot(don) +aes(x=update, y=price, col=address) + geom_point()
```

En fait ... les chiffres qui sont fournis après le 26 mars ont été divisés mystérieusement par 1000. Il faut donc corriger ce problème :

```{r}
library(ggplot2)
don<-don %>%  mutate(price_OK = case_when(price ==0 ~ NA,
                             price < 1 ~ price*1000,
                             TRUE ~ price))
ggplot(don) +aes(x=update, y=price_OK, col=address) + geom_point()
```

On note qu'il este une valeur aberrante mais sinon il est désormais possible de bien suivre l'évolution des prix au cours des trois dernières années et de repérer quelles est la station la moins chèr aux différentes dates.


### 5. Changement de lien

Essayons maintenant de reprendre l'ensemble de notre programme en changeant juste de commune dans le lien initial. On va ici soigner la rédaction du programme

On remplace le code postal de Sucy-en-Brie (94370) par celui d'Ivry-sur-Seine(94200)


```{r}
# Choix du lien (changement du code postal)
link<-"https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/prix-des-carburants-j-1/exports/json?lang=fr&refine=fuel%3A%22Gazole%22&qv1=(94200)&timezone=Europe%2FParis"

# Importation des données
y<-fromJSON(link)

# Selection des variables
don <- y %>% select(name,address, update, price = price_gazole ) %>% 
  mutate(update =as.Date(update)) %>%
  arrange(update)

# Nettoyage des erreurs principales
don<-don %>%  mutate(price_OK = case_when(price ==0 ~ NA,
                             price < 1 ~ price*1000,
                             TRUE ~ price))

# Réalisation d'un graphique
ggplot(don) +aes(x=update, y=price_OK, col=address) + geom_point()

```






### 6. Rédaction d'une Fonction

On peut maintenant écrire une fonction qui ne va dépendre que du code postal et va fournir en sortie le tableau de données. Tout ce que nous avons à faire est de modifier le lien en fonction du code postal qui sera le paramètre de la fonction :



```{r}

gazole_tab <- function(code="94370") { 
# Choix du lien (changement du code postal)
link<-paste0("https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/prix-des-carburants-j-1/exports/json?lang=fr&refine=fuel%3A%22Gazole%22&qv1=(", code,")&timezone=Europe%2FParis")

# Importation des données
y<-fromJSON(link)

# Selection des variables
tab <- y %>% select(name,address, update, price = price_gazole ) %>% 
  mutate(update =as.Date(update)) %>%
  arrange(update)

# Nettoyage des erreurs principales
tab<-tab %>%  mutate(price_OK = case_when(price ==0 ~ NA,
                             price < 1 ~ price*1000,
                             TRUE ~ price))

return(tab)

}


```


Pour tester la fonction, on prend une nouvelle commune, par exemple Saint-Maur des Fossés (94100) :

```{r}
res<-gazole_tab("94100")
head(res)
```


On pourrait aussi faire une fonction qui renvoie non pas le tableau mais le graphique :

```{r}

gazole_graph <- function(code="94370") { 
# Choix du lien (changement du code postal)
link<-paste0("https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/prix-des-carburants-j-1/exports/json?lang=fr&refine=fuel%3A%22Gazole%22&qv1=(", code,")&timezone=Europe%2FParis")

# Importation des données
y<-fromJSON(link)

# Selection des variables
don <- y %>% select(name,address, update, price = price_gazole ) %>% 
  mutate(update =as.Date(update)) %>%
  arrange(update)

# Nettoyage des erreurs principales
don<-don %>%  mutate(price_OK = case_when(price ==0 ~ NA,
                             price < 1 ~ price*1000,
                             TRUE ~ price))

# Réalisation d'un graphique
graph<-ggplot(don) +aes(x=update, y=price_OK, col=address) + geom_point()

return(graph)

}


```



On teste la fonction sur Saint-Maur des Fossés (94100) :

```{r}
gazole_graph("94100")

```

Mais le plus intéressant est de faire une fonction qui permet de renvoyer à la fois le tableau et le graphique en indiquant en sortie une liste d'objets :

```{r}

gazole <- function(code="94370") { 
# Choix du lien (changement du code postal)
link<-paste0("https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/prix-des-carburants-j-1/exports/json?lang=fr&refine=fuel%3A%22Gazole%22&qv1=(", code,")&timezone=Europe%2FParis")

# Importation des données
y<-fromJSON(link)

# Selection des variables
tab <- y %>% select(name,address, update, price = price_gazole ) %>% 
  mutate(update =as.Date(update)) %>%
  arrange(update)

# Nettoyage des erreurs principales
tab<-tab %>%  mutate(price_OK = case_when(price ==0 ~ NA,
                             price < 1 ~ price*1000,
                             TRUE ~ price))

# Réalisation d'un graphique
graph<-ggplot(don) +aes(x=update, y=price_OK, col=address) + geom_point()

return(list("tab"=tab, "graph"=graph))

}


```



Il suffit maintenant d'executer une seule fois la fonction (un seul appel de l'API) pour pouvoir ensuiteau choix utiliser le tableau ou afficher le graphique.


```{r}
res<-gazole("94100")
head(res$tab)
res$graph
```








